{
  "matrices": [
    {
      "title": "did:key Create Operation",
      "ctx": null,
      "suites": [
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:bf8c63b7-2a76-4d7a-a41e-0197a1c1921f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 300,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:1067ccbe-ae8d-4154-8bcc-b2a825da5e8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 301,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 274,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:76859384-d909-44e2-b7f0-dd986612dbf6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:6e473041-0cd6-4de0-9b74-559e19da7a83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:1e2b0a95-d586-40fe-b4ed-2c2fe59353c7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 597,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:f4af987e-a302-4f47-a2a4-eb49b40aaa6c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 598,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:87:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:40:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:117:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:bb567cc9-875d-4767-a3ad-d59e4d610c19",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 620,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:7c8fc51a-3e93-41b7-9a3c-a29e7115b8e9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 620,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:87:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:40:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:143:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:c220a9dc-a342-41c4-aa09-04e5af1ac3eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 641,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:163:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:5abe78f2-0a48-4246-ac3c-5e9371703107",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:87:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:40:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:176:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:0488051b-286e-4115-9f3d-87baf168d90e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(4) } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "timestamp": "2024-11-17T05:18:05.676+00:00",
                  "status": 400,
                  "error": "Bad Request",
                  "path": "/1.0/identifiers/did%3Akey%3Az6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b%2F%5Ebar%5E%2F%3Fquery%3D%60%23z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                },
                "stack": "AssertionError: expected { …(4) } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:24:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:201:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:eeb5df3a-0c51-4f9c-a71c-adc8e1a6351e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:05 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'access-control-allow-origin': '*', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:05 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'access-control-allow-origin': '*', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:214:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:fabecf33-129b-4723-b49b-2003b0b9124b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:83:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:44:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:232:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:c89f8c2f-16e8-45b2-88e9-7d97d2a3752b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 15,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:83:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:44:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:249:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:711e6cff-ba47-4e33-9ff7-fd0665796108",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 748,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:260:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2xoLDdyKiwEm0IT_g6E7O",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:466b64fb-5818-4713-8199-35ca177ddf1c"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:992801e3-513e-4b7f-b818-2cb035a550c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:9cbbed50-311c-4663-94dc-dabd56764bcf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 185,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:fb0f8d88-7df0-4747-abc9-4b7a5088c8de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:03d0cc4b-d6f4-4283-be91-0c45504ab790",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'methodNotSupported'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "methodNotSupported",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'methodNotSupported'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:87:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:40:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:95:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:679c20ce-ab44-42c6-90c7-ca3bc59c1d54",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:7fc928ae-10f3-40b5-ac3c-b75bc5a4c082",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:7f26d744-8a8c-49e4-825b-3c35bd4ffe76",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1039,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:e1ff6cc6-58d5-4fe7-b03d-96e18f3aab16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1039,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:0857bf40-eca6-44ee-ab0d-1bd88964d714",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1082,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:2b2e6647-17fe-464a-8ab1-23127aad8b28",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:5cbc034a-921c-48aa-8881-6b76ae8b1597",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:40cd9a86-ed8c-4f21-8431-c74243b3b5ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:af4223aa-6788-4649-ab84-ecf0d3de34e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:6a863532-ed73-4fb7-8142-25efbae46665",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1292,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:741b2c51-42ef-44b8-b6c2-88ebaf6647ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1340,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2xoLDdyKiwEm0IT_g6E7O",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:dcb7e8bb-a0fd-4710-8092-e7b2cfa42961"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:ba86631c-dad8-42d7-8f8b-44a1bd32dbe2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:80735ed0-3441-4af2-9cde-f747c97f671c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:36:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:69:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:71d3a3c9-26da-4028-88d3-eca9f9a4bfa6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:45d6ef93-6a2b-4202-8626-5b74019f7287",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '42', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b09602bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '42', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b09602bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:92:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:4323c43c-2419-4ffb-94c6-0e07f963338b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:7f4550f4-36b1-4ec0-a4cd-0e0512a663e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b49832bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b49832bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:114:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:f8060ca1-e42d-4d85-8615-9afcf00e5845",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1653,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:42c42026-e9fb-4f69-ab1e-2a9f4b17723e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1653,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b89b22bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b89b22bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:140:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:6eeccf14-1adb-4dd9-a3c2-bdbe94108a69",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1698,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected resolution of did:key:@ to return a response: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected resolution of did:key:@ to return a response: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:156:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:ebcecb1a-a9d2-48e3-ac23-f489933770eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421c1a2c2bfb-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421c1a2c2bfb-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:05e9094c-7f2a-4954-8080-d19a2f999411",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1789,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:36:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:200:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:0011b47e-b91b-46ac-a3e0-ffa57b9d0842",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1829,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '37', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421caa822bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '37', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421caa822bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:214:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:58383745-3def-4979-b769-380e895a5fe4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1875,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421cfaa72bfb-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421cfaa72bfb-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:231:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:2e263ea2-ee0e-46a1-93c5-d86bc28c2d26",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1915,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '32', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421d3ad52bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '32', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421d3ad52bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:248:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:9f1a4233-a8c6-4af8-b324-ab7dafca9a97",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1967,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { Success: { …(3) } } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "Success": {
                    "content": "{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"type\":\"Multikey\",\"controller\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"publicKeyMultibase\":\"z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}",
                    "metadata": {
                      "contentType": "application/did+ld+json"
                    },
                    "document_metadata": {
                      "deactivated": null
                    }
                  }
                },
                "stack": "AssertionError: expected { Success: { …(3) } } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:24:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:262:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2xoLDdyKiwEm0IT_g6E7O",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:87c76568-8c22-4f14-9292-13265648ea0a"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "fNxSWjQqcTqPLAyMSzRp-",
      "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "did:key Resolver",
      "reportData": [],
      "_testId": "urn:uuid:265374f1-4cea-459f-959e-421691ceb960",
      "columns": [
        "Danube Tech",
        "Digital Bazaar",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "The scheme MUST be the value `did`",
          "cells": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:bf8c63b7-2a76-4d7a-a41e-0197a1c1921f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 300,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:992801e3-513e-4b7f-b818-2cb035a550c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:ba86631c-dad8-42d7-8f8b-44a1bd32dbe2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` error if scheme is not `did`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:1067ccbe-ae8d-4154-8bcc-b2a825da5e8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 301,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 274,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:9cbbed50-311c-4663-94dc-dabd56764bcf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 185,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:80735ed0-3441-4af2-9cde-f747c97f671c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:36:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:69:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The method MUST be the value `key`",
          "cells": [
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:76859384-d909-44e2-b7f0-dd986612dbf6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:fb0f8d88-7df0-4747-abc9-4b7a5088c8de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:71d3a3c9-26da-4028-88d3-eca9f9a4bfa6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `methodNotSupported` error if method is not `key`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:6e473041-0cd6-4de0-9b74-559e19da7a83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:03d0cc4b-d6f4-4283-be91-0c45504ab790",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'methodNotSupported'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "methodNotSupported",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'methodNotSupported'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:87:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:40:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:95:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:45d6ef93-6a2b-4202-8626-5b74019f7287",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '42', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b09602bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '42', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b09602bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:92:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The version MUST be convertible to a positive integer value",
          "cells": [
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:1e2b0a95-d586-40fe-b4ed-2c2fe59353c7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 597,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:679c20ce-ab44-42c6-90c7-ca3bc59c1d54",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:4323c43c-2419-4ffb-94c6-0e07f963338b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:f4af987e-a302-4f47-a2a4-eb49b40aaa6c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 598,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:87:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:40:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:117:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:7fc928ae-10f3-40b5-ac3c-b75bc5a4c082",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:7f4550f4-36b1-4ec0-a4cd-0e0512a663e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b49832bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b49832bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:114:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The multibaseValue MUST be a string and begin with the letter `z`",
          "cells": [
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:bb567cc9-875d-4767-a3ad-d59e4d610c19",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 620,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:7f26d744-8a8c-49e4-825b-3c35bd4ffe76",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1039,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:f8060ca1-e42d-4d85-8615-9afcf00e5845",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1653,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:7c8fc51a-3e93-41b7-9a3c-a29e7115b8e9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 620,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:87:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:40:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:143:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:e1ff6cc6-58d5-4fe7-b03d-96e18f3aab16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1039,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:42c42026-e9fb-4f69-ab1e-2a9f4b17723e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1653,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b89b22bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421b89b22bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:140:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:c220a9dc-a342-41c4-aa09-04e5af1ac3eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 641,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:163:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:0857bf40-eca6-44ee-ab0d-1bd88964d714",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1082,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:6eeccf14-1adb-4dd9-a3c2-bdbe94108a69",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1698,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected resolution of did:key:@ to return a response: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected resolution of did:key:@ to return a response: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:156:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:5abe78f2-0a48-4246-ac3c-5e9371703107",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:87:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:40:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:176:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:2b2e6647-17fe-464a-8ab1-23127aad8b28",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:ebcecb1a-a9d2-48e3-ac23-f489933770eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421c1a2c2bfb-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421c1a2c2bfb-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:0488051b-286e-4115-9f3d-87baf168d90e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(4) } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "timestamp": "2024-11-17T05:18:05.676+00:00",
                  "status": 400,
                  "error": "Bad Request",
                  "path": "/1.0/identifiers/did%3Akey%3Az6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b%2F%5Ebar%5E%2F%3Fquery%3D%60%23z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                },
                "stack": "AssertionError: expected { …(4) } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:24:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:201:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:5cbc034a-921c-48aa-8881-6b76ae8b1597",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:05e9094c-7f2a-4954-8080-d19a2f999411",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1789,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:36:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:200:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:eeb5df3a-0c51-4f9c-a71c-adc8e1a6351e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:05 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'access-control-allow-origin': '*', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:05 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'access-control-allow-origin': '*', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:214:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:40cd9a86-ed8c-4f21-8431-c74243b3b5ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:0011b47e-b91b-46ac-a3e0-ffa57b9d0842",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1829,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '37', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421caa822bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '37', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421caa822bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:214:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:fabecf33-129b-4723-b49b-2003b0b9124b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:83:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:44:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:232:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:af4223aa-6788-4649-ab84-ecf0d3de34e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:58383745-3def-4979-b769-380e895a5fe4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1875,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421cfaa72bfb-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421cfaa72bfb-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:231:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:c89f8c2f-16e8-45b2-88e9-7d97d2a3752b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 15,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:83:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:44:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:249:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:6a863532-ed73-4fb7-8142-25efbae46665",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1292,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:2e263ea2-ee0e-46a1-93c5-d86bc28c2d26",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1915,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '32', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421d3ad52bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:18:06 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '32', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e3d421d3ad52bfb-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:248:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "NF4_bTxUwia2dtcRYJ8Xr",
              "ctx": null,
              "_testId": "urn:uuid:711e6cff-ba47-4e33-9ff7-fd0665796108",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 748,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:260:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "dZ32ppB388i62wjBw4seu",
              "ctx": null,
              "_testId": "urn:uuid:741b2c51-42ef-44b8-b6c2-88ebaf6647ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1340,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "nXRdWrbNmMMThtPckod8C",
              "ctx": null,
              "_testId": "urn:uuid:9f1a4233-a8c6-4af8-b324-ab7dafca9a97",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1967,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { Success: { …(3) } } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "Success": {
                    "content": "{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"type\":\"Multikey\",\"controller\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"publicKeyMultibase\":\"z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}",
                    "metadata": {
                      "contentType": "application/did+ld+json"
                    },
                    "document_metadata": {
                      "deactivated": null
                    }
                  }
                },
                "stack": "AssertionError: expected { Success: { …(3) } } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:24:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:262:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "At Risk",
      "rowLabel": "Statement",
      "columnLabel": "Reason",
      "columns": [
        "At least 2 passing implementations"
      ],
      "rows": [
        {
          "id": "MUST raise `methodNotSupported` error if method is not `key`",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
          "cells": [
            {
              "state": "failed"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "did-key-test-suite",
    "subtitle": "Interoperability Report for did:key Method",
    "github": "https://github.com/w3c-ccg/did-key-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/did-key-test-suite/",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ]
  },
  "title": "did:key Method Interoperability Report 1.0",
  "stats": [
    "Tests passed 24/45 53%",
    "Tests failed 21/45 47%",
    "Failures 21",
    "Tests skipped 3",
    "Total tests 48"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}