{
  "matrices": [
    {
      "title": "did:key Create Operation",
      "ctx": null,
      "suites": [
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:fdbda6ea-b9cb-4c6a-8631-4944cde2ee6f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:26095314-6d76-4cef-ad87-45fae4102722",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 304,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 411,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:d5ef6f1d-38f3-4b79-866f-8b11fe4e1e52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:67660147-75a4-410d-a3ae-fef2577f9094",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:9e5acd8d-b27d-4bd2-a380-938b9b7fc7f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:fb63d88d-ba19-437f-a45c-6a18bf1325db",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 737,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:115:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:1197c8c0-2506-4ae7-b6d5-576d9597bf5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 760,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:5618f942-5af9-49fb-b48e-35b3525674ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 761,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:141:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:3b292884-bf9b-4f60-a21a-181671c0f42b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:d69c2737-0edb-4d8d-af9f-b733a0c15d63",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:027435be-6657-4ef2-afc7-42e820244b21",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 814,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(4) } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "timestamp": "2024-09-29T05:17:00.824+00:00",
                  "status": 400,
                  "error": "Bad Request",
                  "path": "/1.0/identifiers/did%3Akey%3Az6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b%2F%5Ebar%5E%2F%3Fquery%3D%60%23z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                },
                "stack": "AssertionError: expected { …(4) } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:199:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:2d96e202-4a75-421f-8965-9aed3e736459",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 829,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:00 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'access-control-allow-origin': '*', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:00 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'access-control-allow-origin': '*', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:95728cf2-d694-46f4-86c5-07c3cea2ce9f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 15,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:6f8f2a1d-2560-4245-81c4-1de1f2ab527d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 15,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:e674af4d-f399-45ec-8607-8bd7e7672d0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "bJp7v2FS1am3KIjTQ7HZZ",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:2617ce49-a7f8-416a-923a-38539bf8a198"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:6d33869c-e1c7-4662-b4d9-06bed7404387",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:a17c8a21-4369-44b8-a51e-2cabf1585495",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:c1e5b549-2a4a-4412-b5bf-02d9418ab11f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:b67c2806-01cc-4a06-a4b8-a65aac5281ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'methodNotSupported'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "methodNotSupported",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'methodNotSupported'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:93:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:7d6e18cf-468c-4d14-9868-782e2c112d8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1128,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:347b471e-c977-4d3d-b969-5a45fc6aa8aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1128,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:26d1d417-fd57-408f-81e3-7831f72ef06e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1166,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:a5f6d34a-7cf5-4fc7-afd3-f4824aa4ade3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:d9e7237a-acf6-45bc-aa26-08702f567b5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1210,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:4cb32854-a02e-4a4e-9ca9-523a47fac8ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:49ad05e2-7fff-4fa0-97a6-d4f02809db07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:fcafeb85-ee65-47be-add6-002c44215664",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1328,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:aacbb01b-71df-48d3-8666-b2f7c2e28996",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1365,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:fe6e306e-7321-4f91-be58-da38a3a69379",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:abb78697-b330-4267-bd7f-0457d20e06e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1444,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "bJp7v2FS1am3KIjTQ7HZZ",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:bf4eb4ea-ad27-44fb-96ef-13236ad2c2cd"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:2f32aa2e-5608-4629-8f8c-b0f30244540c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:bf1277d8-8716-40e9-9739-d13e86382b4d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 196,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:67:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:c6f768fd-2bb9-4018-a893-707cd06808a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:048f6241-37e7-4808-801d-b08713be6302",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '42', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981259b582aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '42', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981259b582aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:90:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:420e9b8a-f46c-491b-9f55-84a38dd16ecf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:bba8e1ed-7853-4eae-bc35-8a1682212a6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca98125db932aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca98125db932aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:112:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:4a6f9c26-2cca-4a0c-b152-9bf00467bbbc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1765,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:90685d23-f2dd-4583-a9b3-eb7d4b5b446f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1765,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981260bcb2aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981260bcb2aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:138:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:f7ec1456-3e78-4e9e-b315-301ca04dfb30",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1810,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected resolution of did:key:@ to return a response: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected resolution of did:key:@ to return a response: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:154:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:500a75c2-592a-4354-975f-a2946c0b9e0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1849,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981269c322aa5-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981269c322aa5-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:172:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:7bf849f9-853f-47e9-b775-2edec1ab8a3d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:198:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:400cf5f2-b808-4315-9c0e-74b559edffbf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1936,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '37', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981272cb02aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '37', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981272cb02aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:c8c11b00-7ef5-4812-a1b4-d01edd4d12aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1975,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:02 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981275cde2aa5-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:02 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981275cde2aa5-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:229:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:9a88541d-2af0-4034-9fc9-a9850be98f35",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2016,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:02 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '32', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca98127ad282aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:02 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '32', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca98127ad282aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:246:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:c87728ec-3610-490a-9428-c06d7239e4e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { Success: { …(3) } } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "Success": {
                    "content": "{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"type\":\"Multikey\",\"controller\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"publicKeyMultibase\":\"z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}",
                    "metadata": {
                      "contentType": "application/did+ld+json"
                    },
                    "document_metadata": {
                      "deactivated": null
                    }
                  }
                },
                "stack": "AssertionError: expected { Success: { …(3) } } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:260:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "bJp7v2FS1am3KIjTQ7HZZ",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:4cfefcfb-05d2-4b2d-b4ee-1d9f47869821"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "OD8ztfr6rtlvohemaHabP",
      "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "did:key Resolver",
      "reportData": [],
      "_testId": "urn:uuid:4c2ac230-8526-4ab3-b695-b20de26363f8",
      "columns": [
        "Danube Tech",
        "Digital Bazaar",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "The scheme MUST be the value `did`",
          "cells": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:fdbda6ea-b9cb-4c6a-8631-4944cde2ee6f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:6d33869c-e1c7-4662-b4d9-06bed7404387",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:2f32aa2e-5608-4629-8f8c-b0f30244540c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` error if scheme is not `did`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:26095314-6d76-4cef-ad87-45fae4102722",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 304,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 411,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:a17c8a21-4369-44b8-a51e-2cabf1585495",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:bf1277d8-8716-40e9-9739-d13e86382b4d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 196,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:67:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The method MUST be the value `key`",
          "cells": [
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:d5ef6f1d-38f3-4b79-866f-8b11fe4e1e52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:c1e5b549-2a4a-4412-b5bf-02d9418ab11f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:c6f768fd-2bb9-4018-a893-707cd06808a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `methodNotSupported` error if method is not `key`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:67660147-75a4-410d-a3ae-fef2577f9094",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:b67c2806-01cc-4a06-a4b8-a65aac5281ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'methodNotSupported'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "methodNotSupported",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'methodNotSupported'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:93:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:048f6241-37e7-4808-801d-b08713be6302",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '42', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981259b582aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '42', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981259b582aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:90:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The version MUST be convertible to a positive integer value",
          "cells": [
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:9e5acd8d-b27d-4bd2-a380-938b9b7fc7f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:7d6e18cf-468c-4d14-9868-782e2c112d8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1128,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:420e9b8a-f46c-491b-9f55-84a38dd16ecf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The version MUST be convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:fb63d88d-ba19-437f-a45c-6a18bf1325db",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 737,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:115:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:347b471e-c977-4d3d-b969-5a45fc6aa8aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1128,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:bba8e1ed-7853-4eae-bc35-8a1682212a6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca98125db932aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca98125db932aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:112:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The multibaseValue MUST be a string and begin with the letter `z`",
          "cells": [
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:1197c8c0-2506-4ae7-b6d5-576d9597bf5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 760,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:26d1d417-fd57-408f-81e3-7831f72ef06e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1166,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:4a6f9c26-2cca-4a0c-b152-9bf00467bbbc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1765,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:5618f942-5af9-49fb-b48e-35b3525674ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 761,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:141:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:a5f6d34a-7cf5-4fc7-afd3-f4824aa4ade3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:90685d23-f2dd-4583-a9b3-eb7d4b5b446f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1765,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981260bcb2aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '34', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981260bcb2aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:138:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:3b292884-bf9b-4f60-a21a-181671c0f42b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:d9e7237a-acf6-45bc-aa26-08702f567b5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1210,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:f7ec1456-3e78-4e9e-b315-301ca04dfb30",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1810,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected resolution of did:key:@ to return a response: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected resolution of did:key:@ to return a response: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:154:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:d69c2737-0edb-4d8d-af9f-b733a0c15d63",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:4cb32854-a02e-4a4e-9ca9-523a47fac8ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:500a75c2-592a-4354-975f-a2946c0b9e0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1849,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981269c322aa5-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981269c322aa5-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:172:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:027435be-6657-4ef2-afc7-42e820244b21",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 814,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(4) } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "timestamp": "2024-09-29T05:17:00.824+00:00",
                  "status": 400,
                  "error": "Bad Request",
                  "path": "/1.0/identifiers/did%3Akey%3Az6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b%2F%5Ebar%5E%2F%3Fquery%3D%60%23z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                },
                "stack": "AssertionError: expected { …(4) } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:199:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:49ad05e2-7fff-4fa0-97a6-d4f02809db07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:7bf849f9-853f-47e9-b775-2edec1ab8a3d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:198:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:2d96e202-4a75-421f-8965-9aed3e736459",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 829,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:00 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'access-control-allow-origin': '*', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:00 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'access-control-allow-origin': '*', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:fcafeb85-ee65-47be-add6-002c44215664",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1328,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:400cf5f2-b808-4315-9c0e-74b559edffbf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1936,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '37', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981272cb02aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:01 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '37', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981272cb02aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:95728cf2-d694-46f4-86c5-07c3cea2ce9f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 15,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:aacbb01b-71df-48d3-8666-b2f7c2e28996",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1365,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:c8c11b00-7ef5-4812-a1b4-d01edd4d12aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1975,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:02 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981275cde2aa5-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:02 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca981275cde2aa5-ORD', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:229:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:6f8f2a1d-2560-4245-81c4-1de1f2ab527d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 15,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:fe6e306e-7321-4f91-be58-da38a3a69379",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:9a88541d-2af0-4034-9fc9-a9850be98f35",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2016,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:02 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '32', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca98127ad282aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 29 Sep 2024 05:17:02 GMT', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', 'content-length': '32', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8ca98127ad282aa5-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:246:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "M29o6MDDVZzuxZGtH88f7",
              "ctx": null,
              "_testId": "urn:uuid:e674af4d-f399-45ec-8607-8bd7e7672d0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "c-HT5vZ1WoYMf7_kb4YF6",
              "ctx": null,
              "_testId": "urn:uuid:abb78697-b330-4267-bd7f-0457d20e06e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1444,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "bBe9CPso0jcZgQCbZP3tE",
              "ctx": null,
              "_testId": "urn:uuid:c87728ec-3610-490a-9428-c06d7239e4e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { Success: { …(3) } } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "Success": {
                    "content": "{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"type\":\"Multikey\",\"controller\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"publicKeyMultibase\":\"z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}",
                    "metadata": {
                      "contentType": "application/did+ld+json"
                    },
                    "document_metadata": {
                      "deactivated": null
                    }
                  }
                },
                "stack": "AssertionError: expected { Success: { …(3) } } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:260:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "did-key-test-suite",
    "subtitle": "Interoperability Report for did:key Method",
    "github": "https://github.com/w3c-ccg/did-key-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/did-key-test-suite/",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ]
  },
  "title": "did:key Method Interoperability Report 1.0",
  "stats": [
    "Tests passed 24/45 53%",
    "Tests failed 21/45 47%",
    "Failures 21",
    "Tests skipped 3",
    "Total tests 48"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}