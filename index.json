{
  "matrices": [
    {
      "title": "did:key Create Operation",
      "ctx": null,
      "suites": [
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:3c7d2b8b-416e-4258-8d49-d8bb64925299",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:57c0f614-2d3e-42e8-8cfc-f54d2bf82cc5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 315,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 355,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:f00cd14c-f32d-40bc-8b43-110670a435bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:5a813bb5-1889-467d-aad9-7ddd4eefaa77",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:ff595d81-739b-4f14-99bd-642a49c5c766",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 706,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:d6a31344-3608-4c77-926f-0f0749bc5b85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:115:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:28a90da2-0146-40c9-97c4-8c51a80189ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:246884af-3d79-46a0-a0d1-5713ecf52719",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:141:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:d176a2c1-ef24-4b13-9b41-d8db16206b07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 776,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:cfb0a6d8-154f-46a1-9293-e211b7f2b4f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:296a8b8f-0134-4190-956e-ce42e1733960",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 846,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(4) } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "timestamp": "2024-07-07T05:17:04.544+00:00",
                  "status": 400,
                  "error": "Bad Request",
                  "path": "/1.0/identifiers/did%3Akey%3Az6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b%2F%5Ebar%5E%2F%3Fquery%3D%60%23z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                },
                "stack": "AssertionError: expected { …(4) } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:199:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:28e02ab6-0f30-48f6-9d96-355fdd26d475",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'representationNotSupported' to equal 'unsupportedPublicKeyType'",
                "showDiff": true,
                "actual": "representationNotSupported",
                "expected": "unsupportedPublicKeyType",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'representationNotSupported' to equal 'unsupportedPublicKeyType'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:213:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:edf22e54-b42f-4d59-90ce-8aa2b21d5ab5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 919,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:80e7802e-2330-4bcb-83db-dc2c817b33fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:da61ee58-7b2e-4b46-970d-237a553c3807",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "e3UbwHQqL1CF6YroERgy3",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:eddc4480-315b-46ad-a329-8e889fa1ceba"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:5503d299-7959-4883-9e85-cd253b1df10a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1008,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:663b328c-d9f5-4e51-b621-7fbf4d4589d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1009,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:4324fa90-4fc7-40a8-9221-eedbe084bca9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:f21ad1f3-99ff-4f94-a81a-0c1eb7225205",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'methodNotSupported'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "methodNotSupported",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'methodNotSupported'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:93:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:b8a04fc8-427a-4c5a-8aae-74dc57ae93f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:5a707947-f1b4-4f94-bc6a-e651c8cc9e7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:4b07fbbf-b7f1-4c8f-bd17-b7663f774e88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:21d511f1-08c9-48bf-a2bb-50f3ed71fc1b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1281,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:5c7ade92-3541-431d-b157-e4730b2a8a0b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1311,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:dff5ba38-0019-4b1d-9b8d-6b30fc2b07c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1339,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:0ca48146-b549-4702-8da1-6b433cae9bdb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:71ac2b11-b690-4957-8ea0-c33611274b4a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:71c2f6c7-9c82-4893-87b0-10e424409a45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1430,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:e945812d-9797-469d-b529-21e6600c286b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:fdd6b3f6-7b81-49e8-b4eb-449d27ed007d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "e3UbwHQqL1CF6YroERgy3",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:eda4ac90-dd9f-42c7-a2be-9db4e8f785e6"
        },
        {
          "title": "IDLab",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:cb417df4-b920-4ef2-894f-cc8ca233683a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:38f94446-1331-4f11-9ebe-d2d09647874b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:e3773007-f2f8-4aee-badd-6cd9dab2a670",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1694,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:82a2cc32-4168-439b-a22c-9ce7d4483a37",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1694,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:aae0ad83-f064-4d50-9276-abd1cd587375",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:13fc72fc-4c21-4fe0-b7e7-0c46b470da56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:991df352-93d3-49d4-8a06-45576a0a2bb4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1834,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:7919b3dc-6ff4-46c2-b423-7da722e0e41c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1834,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:0a048161-b3a1-4f0d-9fe0-54b9a6a4d423",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1902,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:a0e98f71-5b2d-48e2-bb5c-804064ed6875",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:5e759825-b846-4181-ac8a-d938409db13b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2042,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { detail: 'Not Found' } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "detail": "Not Found"
                },
                "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:199:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:7c9e059d-9363-45a4-aee5-965beb124763",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'unsupportedPublicKeyType'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "unsupportedPublicKeyType",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'unsupportedPublicKeyType'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:213:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:1ed6de41-2d08-42f8-9ef0-9785c005c74b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2178,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:584c6523-50db-4658-aa24-fc7fe6ced641",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2246,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:3269e9e8-9243-4a6d-ac20-0695d13a13bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "e3UbwHQqL1CF6YroERgy3",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:a0595d72-da9d-4c70-a00f-7a52c4835405"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:c12a9783-7ea1-4917-bd37-f7c457f6dcbf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:286de008-b315-44e7-8d5e-e1d3f3a5b25b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:67:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:69f78408-d861-4515-b834-034a10fad2bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:c07cb48c-22e9-4409-9a8a-e000d7ac5e65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:90:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:10dbce35-80bb-4371-a893-fcc1799d9fc2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2510,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:4e04f5c5-61f5-477c-a43d-f9e241745104",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2510,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:112:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:7c8f13b8-5967-4889-9135-f35dac7b8fb6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:826b87fc-8624-4b19-823a-99b002687b9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:138:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:4001173a-7fa4-4b8f-94f7-d06282f6e686",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected resolution of did:key:@ to return a response: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected resolution of did:key:@ to return a response: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:154:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:619e40e8-d7d6-4ff9-811a-c58a759079b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:172:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:5f20acbe-b81b-4a92-bf25-06b5c187c4e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2602,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 345,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:198:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:cc2bbcf1-ecf3-4544-bfae-2a777425c8b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '89f55dc47bde1733-IAD', connection: 'keep-alive', 'content-length': '871', 'content-type': 'application/did+ld+json', date: 'Sun, 07 Jul 2024 05:17:06 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '89f55dc47bde1733-IAD', connection: 'keep-alive', 'content-length': '871', 'content-type': 'application/did+ld+json', date: 'Sun, 07 Jul 2024 05:17:06 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:7d8658b7-6b3d-43b8-98b2-ce0421868f53",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '89f55dc49bf71733-IAD', connection: 'keep-alive', 'content-length': '527', 'content-type': 'application/octet-stream', date: 'Sun, 07 Jul 2024 05:17:06 GMT', server: 'cloudflare' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '89f55dc49bf71733-IAD', connection: 'keep-alive', 'content-length': '527', 'content-type': 'application/octet-stream', date: 'Sun, 07 Jul 2024 05:17:06 GMT', server: 'cloudflare' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:229:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:17daaa89-14f6-4541-bb27-a7145c70095b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 342,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:246:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:a91fd647-c64a-4dc7-8e8a-38e8f794dc4f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected DID Resolver response to have data.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected DID Resolver response to have data.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:17:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:260:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "e3UbwHQqL1CF6YroERgy3",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:7b765ccf-4871-45a8-8e43-f71937d7625f"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "JH6mjNm6QJG-VA3BQuFpG",
      "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "did:key Resolver",
      "reportData": [],
      "_testId": "urn:uuid:5cb9cf4f-5db5-49b9-8ad6-bdf41f5d23e6",
      "columns": [
        "Danube Tech",
        "Digital Bazaar",
        "IDLab",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "The scheme MUST be the value `did`",
          "cells": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:3c7d2b8b-416e-4258-8d49-d8bb64925299",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:5503d299-7959-4883-9e85-cd253b1df10a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1008,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:cb417df4-b920-4ef2-894f-cc8ca233683a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:c12a9783-7ea1-4917-bd37-f7c457f6dcbf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` error if scheme is not `did`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:57c0f614-2d3e-42e8-8cfc-f54d2bf82cc5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 315,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 355,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:663b328c-d9f5-4e51-b621-7fbf4d4589d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1009,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:38f94446-1331-4f11-9ebe-d2d09647874b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:286de008-b315-44e7-8d5e-e1d3f3a5b25b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:67:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The method MUST be the value `key`",
          "cells": [
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:f00cd14c-f32d-40bc-8b43-110670a435bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:4324fa90-4fc7-40a8-9221-eedbe084bca9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:e3773007-f2f8-4aee-badd-6cd9dab2a670",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1694,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:69f78408-d861-4515-b834-034a10fad2bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `methodNotSupported` error if method is not `key`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:5a813bb5-1889-467d-aad9-7ddd4eefaa77",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:f21ad1f3-99ff-4f94-a81a-0c1eb7225205",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'methodNotSupported'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "methodNotSupported",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'methodNotSupported'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:93:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:82a2cc32-4168-439b-a22c-9ce7d4483a37",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1694,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:c07cb48c-22e9-4409-9a8a-e000d7ac5e65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:90:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The version MUST be convertible to a positive integer value.",
          "cells": [
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:ff595d81-739b-4f14-99bd-642a49c5c766",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 706,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:b8a04fc8-427a-4c5a-8aae-74dc57ae93f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:aae0ad83-f064-4d50-9276-abd1cd587375",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:10dbce35-80bb-4371-a893-fcc1799d9fc2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2510,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:d6a31344-3608-4c77-926f-0f0749bc5b85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:115:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:5a707947-f1b4-4f94-bc6a-e651c8cc9e7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:13fc72fc-4c21-4fe0-b7e7-0c46b470da56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:4e04f5c5-61f5-477c-a43d-f9e241745104",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2510,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:112:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The multibaseValue MUST be a string and begin with the letter `z`",
          "cells": [
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:28a90da2-0146-40c9-97c4-8c51a80189ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:4b07fbbf-b7f1-4c8f-bd17-b7663f774e88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:991df352-93d3-49d4-8a06-45576a0a2bb4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1834,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:7c8f13b8-5967-4889-9135-f35dac7b8fb6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:246884af-3d79-46a0-a0d1-5713ecf52719",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:141:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:21d511f1-08c9-48bf-a2bb-50f3ed71fc1b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1281,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:7919b3dc-6ff4-46c2-b423-7da722e0e41c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1834,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:826b87fc-8624-4b19-823a-99b002687b9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:138:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:d176a2c1-ef24-4b13-9b41-d8db16206b07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 776,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:5c7ade92-3541-431d-b157-e4730b2a8a0b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1311,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:0a048161-b3a1-4f0d-9fe0-54b9a6a4d423",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1902,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:4001173a-7fa4-4b8f-94f7-d06282f6e686",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected resolution of did:key:@ to return a response: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected resolution of did:key:@ to return a response: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:154:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:cfb0a6d8-154f-46a1-9293-e211b7f2b4f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:dff5ba38-0019-4b1d-9b8d-6b30fc2b07c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1339,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:a0e98f71-5b2d-48e2-bb5c-804064ed6875",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:619e40e8-d7d6-4ff9-811a-c58a759079b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:172:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:296a8b8f-0134-4190-956e-ce42e1733960",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 846,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(4) } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "timestamp": "2024-07-07T05:17:04.544+00:00",
                  "status": 400,
                  "error": "Bad Request",
                  "path": "/1.0/identifiers/did%3Akey%3Az6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b%2F%5Ebar%5E%2F%3Fquery%3D%60%23z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                },
                "stack": "AssertionError: expected { …(4) } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:199:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:0ca48146-b549-4702-8da1-6b433cae9bdb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:5e759825-b846-4181-ac8a-d938409db13b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2042,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { detail: 'Not Found' } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "detail": "Not Found"
                },
                "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:199:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:5f20acbe-b81b-4a92-bf25-06b5c187c4e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2602,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 345,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:198:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:28e02ab6-0f30-48f6-9d96-355fdd26d475",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'representationNotSupported' to equal 'unsupportedPublicKeyType'",
                "showDiff": true,
                "actual": "representationNotSupported",
                "expected": "unsupportedPublicKeyType",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'representationNotSupported' to equal 'unsupportedPublicKeyType'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:213:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:71ac2b11-b690-4957-8ea0-c33611274b4a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:7c9e059d-9363-45a4-aee5-965beb124763",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'unsupportedPublicKeyType'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "unsupportedPublicKeyType",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'unsupportedPublicKeyType'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:213:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:cc2bbcf1-ecf3-4544-bfae-2a777425c8b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '89f55dc47bde1733-IAD', connection: 'keep-alive', 'content-length': '871', 'content-type': 'application/did+ld+json', date: 'Sun, 07 Jul 2024 05:17:06 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '89f55dc47bde1733-IAD', connection: 'keep-alive', 'content-length': '871', 'content-type': 'application/did+ld+json', date: 'Sun, 07 Jul 2024 05:17:06 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:edf22e54-b42f-4d59-90ce-8aa2b21d5ab5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 919,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:71c2f6c7-9c82-4893-87b0-10e424409a45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1430,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:1ed6de41-2d08-42f8-9ef0-9785c005c74b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2178,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:7d8658b7-6b3d-43b8-98b2-ce0421868f53",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '89f55dc49bf71733-IAD', connection: 'keep-alive', 'content-length': '527', 'content-type': 'application/octet-stream', date: 'Sun, 07 Jul 2024 05:17:06 GMT', server: 'cloudflare' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '89f55dc49bf71733-IAD', connection: 'keep-alive', 'content-length': '527', 'content-type': 'application/octet-stream', date: 'Sun, 07 Jul 2024 05:17:06 GMT', server: 'cloudflare' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:229:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:80e7802e-2330-4bcb-83db-dc2c817b33fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:e945812d-9797-469d-b529-21e6600c286b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:584c6523-50db-4658-aa24-fc7fe6ced641",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2246,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:17daaa89-14f6-4541-bb27-a7145c70095b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 342,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:246:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "KOO5vHf2U07C6y30-NQJX",
              "ctx": null,
              "_testId": "urn:uuid:da61ee58-7b2e-4b46-970d-237a553c3807",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "ttQzyaS7n_iHGfOrbuN02",
              "ctx": null,
              "_testId": "urn:uuid:fdd6b3f6-7b81-49e8-b4eb-449d27ed007d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "Ic1z8l9O33v_R9DC9OSl-",
              "ctx": null,
              "_testId": "urn:uuid:3269e9e8-9243-4a6d-ac20-0695d13a13bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zy101UC-8dDOzgjdTVjZ-",
              "ctx": null,
              "_testId": "urn:uuid:a91fd647-c64a-4dc7-8e8a-38e8f794dc4f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected DID Resolver response to have data.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected DID Resolver response to have data.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:17:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:260:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "did-key-test-suite",
    "subtitle": "Interoperability Report for did:key Method",
    "github": "https://github.com/w3c-ccg/did-key-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/did-key-test-suite/",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ]
  },
  "title": "did:key Method Interoperability Report 1.0",
  "stats": [
    "Tests passed 32/60 53%",
    "Tests failed 28/60 47%",
    "Failures 28",
    "Tests skipped 4",
    "Total tests 64"
  ]
}