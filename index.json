{
  "matrices": [
    {
      "title": "did:key Create Operation",
      "ctx": null,
      "suites": [
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:30b8f7c1-ad4e-46d4-83fd-7176a3f43072",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 305,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:bf7240b8-6a80-4fd0-afc9-cfc7c553cf23",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 342,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:21522ebd-c77e-42c3-8b2e-86542a2b7d73",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 649,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:32299487-d097-4112-acbb-8f4c028fcee8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 649,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:d4a8ac5c-f02d-43cc-8ae7-8c0450a32c33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:a25a5079-0731-4181-b8e0-89794ec4e402",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:115:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:63322325-d5e3-4ece-a378-1898c993b7e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 697,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:082186c9-463a-4610-abf2-aa79e8a11768",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 697,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:141:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:9ab889b9-6528-422e-9311-3ea8a0a59d09",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:80ff00cd-c9ee-4ff7-a647-cc7be4a258c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:a56f892a-507e-4839-bb7c-c43f99a31755",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:200:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:283c3cc5-d727-4e4b-abe5-0545af63385c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 773,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response{ data: { …(4) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response{ data: { …(4) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:e4569260-7704-4812-9470-11b02359e2cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:5a80d042-23d7-416b-83e9-7f1ba04eb922",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:c91ba326-e3e9-44c9-8621-5248d07ffe22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 828,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Gw70vEbkic2esHDN7PAbz",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:68b42efa-63b0-4753-9341-2c29d4261be4"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:b93d5ea7-7271-4fb6-88ff-0fcfabd126de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:a30ce06d-23c4-4680-9fa3-04b8ba55dc71",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 160,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:74ca572f-5008-4743-a5b8-1c2efbc1d0ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:ac3d812a-42f8-4e6b-8268-8ac8d8a8c28e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'methodNotSupported'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "methodNotSupported",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'methodNotSupported'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:93:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:6002b8a2-5755-437a-8856-1e410322c45f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1040,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:62f05607-4621-4c30-b6f0-26ef7722e835",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:4dc16bcb-4261-4ee0-bded-11aad3c1a6af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1100,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:3223654f-74f4-42ed-b002-40c3dd208fad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1100,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:5236dde2-3b8b-4fb1-b27d-02be17d2d714",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1129,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:2f2ade0d-270f-4d0a-9518-756a99657b6f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1164,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:0362ac48-4ea7-422c-9c8e-8a830443943d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1195,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:44688225-47a7-4902-a79a-f3b44ce5aa78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1225,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:19158158-4d04-49af-81ea-81fd0b680ab6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1254,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:bdcece37-ffdd-40f8-a1bc-b849e4f93328",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:bb57f1d8-7252-4153-aacf-90964373a98d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Gw70vEbkic2esHDN7PAbz",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:db185f28-ced6-4e48-8fcd-0df3cbaff3d1"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:864ffce4-7c9f-48fe-b44c-084397933f77",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1360,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:d1f3935e-0654-486e-ac2d-1129866d7cc8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1361,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:67:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:2c882f76-4a14-457a-9e1e-d4057eaae8ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1410,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:a5a92621-eb1c-4ca2-b3a5-018f0d7c154d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1410,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:90:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:eecd288f-62d8-464b-b65a-806d3f23d5b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1431,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:3a54db63-b875-4f07-aac0-7eb4f201b08e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1431,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:112:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:ea972b07-e3f9-4faf-ba0a-68c800849df9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1452,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:b91218d5-c0f8-498c-8b2a-42e0080d504c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1452,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:138:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:57e1203d-dfa4-44f1-bc58-7c8a6f661171",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1472,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected resolution of did:key:@ to return a response: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected resolution of did:key:@ to return a response: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:154:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:fb63eab0-8e7b-44e4-b634-e7ad24d87c34",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:172:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:61ee4d7e-68f2-4c88-b372-bea8422d22c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1509,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 340,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:198:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:eb1bf67d-2986-4b96-b4c6-915317e00dd5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1849,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response{ data: { …(5) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response{ data: { …(5) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:fcd60499-0f5d-4b03-8394-b5dae4e9bf53",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1868,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response{ …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response{ …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:229:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:acd7cba8-bb8b-4f73-bcd4-3a334fc41ee8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1887,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 336,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:246:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:5d73f36e-7362-4f27-a1c3-7d1e87a6be7e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2224,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected DID Resolver response to have data.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected DID Resolver response to have data.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:17:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:260:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Gw70vEbkic2esHDN7PAbz",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:6c7b4ac8-4142-49e3-a118-d7cd4f6b6329"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "jgoc_Vz_MqJPkyOJrptj3",
      "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "did:key Resolver",
      "reportData": [],
      "_testId": "urn:uuid:e95f5385-e14d-4775-a151-623d15a15436",
      "columns": [
        "Danube Tech",
        "Digital Bazaar",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "The scheme MUST be the value `did`",
          "cells": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:30b8f7c1-ad4e-46d4-83fd-7176a3f43072",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 305,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:b93d5ea7-7271-4fb6-88ff-0fcfabd126de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:864ffce4-7c9f-48fe-b44c-084397933f77",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1360,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` error if scheme is not `did`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:bf7240b8-6a80-4fd0-afc9-cfc7c553cf23",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 342,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:a30ce06d-23c4-4680-9fa3-04b8ba55dc71",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 160,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:d1f3935e-0654-486e-ac2d-1129866d7cc8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1361,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:67:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The method MUST be the value `key`",
          "cells": [
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:21522ebd-c77e-42c3-8b2e-86542a2b7d73",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 649,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:74ca572f-5008-4743-a5b8-1c2efbc1d0ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:2c882f76-4a14-457a-9e1e-d4057eaae8ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1410,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `methodNotSupported` error if method is not `key`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:32299487-d097-4112-acbb-8f4c028fcee8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 649,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:ac3d812a-42f8-4e6b-8268-8ac8d8a8c28e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'methodNotSupported'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "methodNotSupported",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'methodNotSupported'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:93:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:a5a92621-eb1c-4ca2-b3a5-018f0d7c154d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1410,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:90:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The version MUST be convertible to a positive integer value.",
          "cells": [
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:d4a8ac5c-f02d-43cc-8ae7-8c0450a32c33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:6002b8a2-5755-437a-8856-1e410322c45f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1040,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:eecd288f-62d8-464b-b65a-806d3f23d5b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1431,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:a25a5079-0731-4181-b8e0-89794ec4e402",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:115:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:62f05607-4621-4c30-b6f0-26ef7722e835",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:3a54db63-b875-4f07-aac0-7eb4f201b08e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1431,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:112:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The multibaseValue MUST be a string and begin with the letter `z`",
          "cells": [
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:63322325-d5e3-4ece-a378-1898c993b7e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 697,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:4dc16bcb-4261-4ee0-bded-11aad3c1a6af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1100,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:ea972b07-e3f9-4faf-ba0a-68c800849df9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1452,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:082186c9-463a-4610-abf2-aa79e8a11768",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 697,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:141:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:3223654f-74f4-42ed-b002-40c3dd208fad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1100,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:b91218d5-c0f8-498c-8b2a-42e0080d504c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1452,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:138:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:9ab889b9-6528-422e-9311-3ea8a0a59d09",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:5236dde2-3b8b-4fb1-b27d-02be17d2d714",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1129,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:57e1203d-dfa4-44f1-bc58-7c8a6f661171",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1472,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected resolution of did:key:@ to return a response: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected resolution of did:key:@ to return a response: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:154:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:80ff00cd-c9ee-4ff7-a647-cc7be4a258c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:2f2ade0d-270f-4d0a-9518-756a99657b6f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1164,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:fb63eab0-8e7b-44e4-b634-e7ad24d87c34",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:172:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:a56f892a-507e-4839-bb7c-c43f99a31755",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:200:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:0362ac48-4ea7-422c-9c8e-8a830443943d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1195,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:61ee4d7e-68f2-4c88-b372-bea8422d22c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1509,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 340,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:198:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:283c3cc5-d727-4e4b-abe5-0545af63385c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 773,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response{ data: { …(4) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response{ data: { …(4) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:44688225-47a7-4902-a79a-f3b44ce5aa78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1225,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:eb1bf67d-2986-4b96-b4c6-915317e00dd5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1849,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response{ data: { …(5) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response{ data: { …(5) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:e4569260-7704-4812-9470-11b02359e2cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:19158158-4d04-49af-81ea-81fd0b680ab6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1254,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:fcd60499-0f5d-4b03-8394-b5dae4e9bf53",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1868,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response{ …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response{ …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:229:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:5a80d042-23d7-416b-83e9-7f1ba04eb922",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:bdcece37-ffdd-40f8-a1bc-b849e4f93328",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:acd7cba8-bb8b-4f73-bcd4-3a334fc41ee8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1887,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 336,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:246:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "0BWIyNNxR3nVH3xZJK2L-",
              "ctx": null,
              "_testId": "urn:uuid:c91ba326-e3e9-44c9-8621-5248d07ffe22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 828,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "YLFGMtyCXjJH_xmfZlkRl",
              "ctx": null,
              "_testId": "urn:uuid:bb57f1d8-7252-4153-aacf-90964373a98d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "zoVh-ohDxUw8flrQWDxSG",
              "ctx": null,
              "_testId": "urn:uuid:5d73f36e-7362-4f27-a1c3-7d1e87a6be7e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2224,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected DID Resolver response to have data.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected DID Resolver response to have data.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:17:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:260:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "did-key-test-suite",
    "subtitle": "Interoperability Report for did:key Method",
    "github": "https://github.com/w3c-ccg/did-key-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/did-key-test-suite/",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ]
  },
  "title": "did:key Method Interoperability Report 1.0",
  "stats": [
    "Tests passed 24/45 53%",
    "Tests failed 21/45 47%",
    "Failures 21",
    "Tests skipped 3",
    "Total tests 48"
  ]
}