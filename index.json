{
  "matrices": [
    {
      "title": "did:key Create Operation",
      "ctx": null,
      "suites": [
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:f615deb8-2354-40c3-994b-36a6510b2843",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:79c229b5-1bf7-491c-a76f-d58a900c2afb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 520,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:cd4dcbc9-d3b3-4767-a8b8-f83d5a35b2b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:ce879145-9174-4a0d-a8ce-1596e5d07c91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 927,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:199d9c75-f7e3-433b-9c84-fd69a16910d4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:54eea211-ab52-4fbb-9bd8-c85b97c9b561",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:115:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:6abbd877-402e-4a15-9f84-4c058688f603",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 992,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:2aedc862-3bf7-4c5b-9a32-8283fa4ad734",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:141:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:5c390cb0-890d-426a-93eb-3ced4adf94fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:68ac4eb5-4ca3-499a-8790-bcf464b18358",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:ba5ca3ca-b71e-47d7-a2f9-35db83fa5cce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(4) } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "timestamp": "2024-07-28T05:16:55.370+00:00",
                  "status": 400,
                  "error": "Bad Request",
                  "path": "/1.0/identifiers/did%3Akey%3Az6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b%2F%5Ebar%5E%2F%3Fquery%3D%60%23z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                },
                "stack": "AssertionError: expected { …(4) } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:199:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:0f3c4486-a8c9-43af-8181-ac24eed4c1e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1118,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', date: 'Sun, 28 Jul 2024 05:16:55 GMT', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', date: 'Sun, 28 Jul 2024 05:16:55 GMT', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:f12d3d6c-0b98-473d-a0d7-dba4b19cc72a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1155,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:94dc6aec-291b-41f0-a8ea-f75cd42ee173",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1181,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:02e3ad08-938e-4012-8c2d-c7f3ccbaa404",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mDh29nLOmNb1mTGLOGlgN",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:3eba8d4b-5948-4c60-930a-0c723b2d9721"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:c3aaa571-981c-402a-97a3-256bbbae8920",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1235,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:c9c6651e-dffa-45c7-962a-2e051e3d73d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1236,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 190,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:4b127ea7-a8ca-45a6-aff9-e395ed0855e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:349e0241-2dd6-4744-ae36-9150d12e0b8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'methodNotSupported'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "methodNotSupported",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'methodNotSupported'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:93:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:02dddb0c-af8e-4d31-a6bc-e3e095ee7f9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:76a095b3-0178-4c6b-aef0-6c9ec456d684",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:ff43bed3-0641-49f4-b4f2-b8ab1bb68a8a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1519,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:2e7a9838-04c5-4dec-9d65-a7f1d9565e56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1519,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:5ea6294a-c557-474d-bbd2-f0204fc91b44",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:e8a4d962-a064-4729-94bc-df08b9389d67",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:1202a3be-4879-4b32-b2b2-f22e03d2d040",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1648,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:60fd0984-c5e2-4caf-8087-0841c037a3fd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:8203f28d-218f-4d9b-80ad-4e8640651787",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1729,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:0e66d22f-ede0-4f7d-83fa-588803d59a26",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1772,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:d82577fc-8c04-488e-9f79-ff5acd26e812",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1820,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mDh29nLOmNb1mTGLOGlgN",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:7f680b89-de9d-4c45-8c7e-7c3a9bd9be1d"
        },
        {
          "title": "IDLab",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:3f531b24-d419-44ce-b89b-f87ec6cf3315",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1864,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:055b46e5-cd5b-443f-ad8e-5c174b154e67",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:5c64e692-10c1-4210-9861-f3d95f20e902",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2015,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:088bd768-5a5e-4e42-91f1-4d8270827fd8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2016,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:b6e2ffef-ba6e-499d-8a0e-3028d705f804",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2083,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:1d078ebb-3b88-47fb-9ac2-04227da26957",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:6b73cd68-6176-40ad-b6fe-ed93a14070bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2151,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:8e40275e-d77f-4778-b43c-17dd47009ba1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:1bad4943-370c-4303-9e72-6f84031009b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:b388c73b-3eb5-436e-b61a-350754d66939",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:4d7b92a4-66e9-44f6-8126-0cf3b821ce95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { detail: 'Not Found' } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "detail": "Not Found"
                },
                "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:199:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:8d2e201a-1252-486f-9954-cbcbd34e558c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'unsupportedPublicKeyType'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "unsupportedPublicKeyType",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'unsupportedPublicKeyType'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:213:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:42756b75-62ff-43df-b8ec-cd5dd7f08605",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2492,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:b4696b62-6947-42a4-b399-a419cbaa40f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2560,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:02083ce4-e635-4ab3-9dea-eb565d1eca44",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2627,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mDh29nLOmNb1mTGLOGlgN",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:ef5d9a58-9106-4447-8c8e-a1804273a24c"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:0f7c9f60-c695-441f-81c7-4b486ef7756e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2696,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:17fd108c-176c-4e48-88d1-a256050fb90e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2696,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 227,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:67:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:7a8cda42-ef4d-418b-b819-2e7da9de77a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2923,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:ef95f506-f256-42f7-8390-f52c372dcee6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2924,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa266697d852943-ORD', connection: 'keep-alive', 'content-length': '42', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa266697d852943-ORD', connection: 'keep-alive', 'content-length': '42', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:90:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:5d2d15b2-9b42-4240-97ce-7f9cdb7106cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:ac573aa8-ce75-4006-bf5d-ce181e8e5923",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa26669ddce2943-ORD', connection: 'keep-alive', 'content-length': '34', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa26669ddce2943-ORD', connection: 'keep-alive', 'content-length': '34', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:112:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:24f5005f-9db6-4e44-a737-1140a7987571",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:e5714b11-8d9d-4ee7-94d6-81acc2abc95b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666a2e232943-ORD', connection: 'keep-alive', 'content-length': '34', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666a2e232943-ORD', connection: 'keep-alive', 'content-length': '34', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:138:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:371ee34a-0295-4c58-877a-bc19345188cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected resolution of did:key:@ to return a response: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected resolution of did:key:@ to return a response: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:154:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:06b90cc2-b086-456b-a4d3-31f47e483e9f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3148,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666aeebd2943-ORD', connection: 'keep-alive', 'content-encoding': 'gzip', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666aeebd2943-ORD', connection: 'keep-alive', 'content-encoding': 'gzip', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:172:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If an invalid public key value is detected, an `invalidPublicKey` error MUST be raised.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:c1fb709c-3533-42e9-b13f-4f127677d356",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:198:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:728898dd-d0f4-4a20-91fb-c31491016d93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3265,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666b9f6c2943-ORD', connection: 'keep-alive', 'content-length': '37', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666b9f6c2943-ORD', connection: 'keep-alive', 'content-length': '37', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:0e8e14a0-fd70-4e73-9918-77f689ba50e2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3319,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666bffac2943-ORD', connection: 'keep-alive', 'content-encoding': 'gzip', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666bffac2943-ORD', connection: 'keep-alive', 'content-encoding': 'gzip', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:229:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:1433a376-f387-4820-a6c5-91ac40a16ea9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666c4fe92943-ORD', connection: 'keep-alive', 'content-length': '32', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666c4fe92943-ORD', connection: 'keep-alive', 'content-length': '32', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:246:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:d6dc7a73-9029-437d-84b7-57b4af1f6440",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3431,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { Success: { …(3) } } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "Success": {
                    "content": "{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"type\":\"Multikey\",\"controller\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"publicKeyMultibase\":\"z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}",
                    "metadata": {
                      "contentType": "application/did+ld+json"
                    },
                    "document_metadata": {
                      "deactivated": null
                    }
                  }
                },
                "stack": "AssertionError: expected { Success: { …(3) } } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:260:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mDh29nLOmNb1mTGLOGlgN",
          "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:05c3a76c-1aef-4129-8a0b-74175f46c378"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "DtcsXalMfwy5SStVygdsZ",
      "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "did:key Resolver",
      "reportData": [],
      "_testId": "urn:uuid:af705bcd-5287-4b72-806f-17667aa2ebd5",
      "columns": [
        "Danube Tech",
        "Digital Bazaar",
        "IDLab",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "The scheme MUST be the value `did`",
          "cells": [
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:f615deb8-2354-40c3-994b-36a6510b2843",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:c3aaa571-981c-402a-97a3-256bbbae8920",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1235,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:3f531b24-d419-44ce-b89b-f87ec6cf3315",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1864,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The scheme MUST be the value `did`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {scheme} = splitDid({did});\n        should.exist(scheme, 'Expected first part of the did to exist.');\n        scheme.should.be.a('string', 'Expected did scheme to be a string.');\n        scheme.should.equal('did', 'Expected scheme to be \"did\"');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:0f7c9f60-c695-441f-81c7-4b486ef7756e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The scheme MUST be the value `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2696,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` error if scheme is not `did`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:79c229b5-1bf7-491c-a76f-d58a900c2afb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 520,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:c9c6651e-dffa-45c7-962a-2e051e3d73d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1236,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 190,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:055b46e5-cd5b-443f-ad8e-5c174b154e67",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` error if scheme is not `did`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const noDidScheme = did.replace(/^did:/, 'notDid:');\n          const {result, error} = await didResolver.get({\n            url: makeUrl(noDidScheme),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'invalidDid');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:17fd108c-176c-4e48-88d1-a256050fb90e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` error if scheme is not `did`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2696,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 227,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:67:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The method MUST be the value `key`",
          "cells": [
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:cd4dcbc9-d3b3-4767-a8b8-f83d5a35b2b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:4b127ea7-a8ca-45a6-aff9-e395ed0855e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:5c64e692-10c1-4210-9861-f3d95f20e902",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2015,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The method MUST be the value `key`",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {method} = splitDid({did});\n        should.exist(method, 'Expected did to have a method');\n        method.should.be.a('string', 'Expected method to be a string');\n        method.should.equal('key', 'Expected method to equal key');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:7a8cda42-ef4d-418b-b819-2e7da9de77a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The method MUST be the value `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2923,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `methodNotSupported` error if method is not `key`",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:ce879145-9174-4a0d-a8ce-1596e5d07c91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 927,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:349e0241-2dd6-4744-ae36-9150d12e0b8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'methodNotSupported'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "methodNotSupported",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'methodNotSupported'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:93:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:088bd768-5a5e-4e42-91f1-4d8270827fd8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2016,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `methodNotSupported` error if method is not `key`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {parts} = splitDid({did});\n          // use the first part and everything after the second part\n          const methodNotKey = `${parts[0]}:experimental:` +\n            `${parts.slice(2).join(':')}`;\n          const {result, error} = await didResolver.get({\n            url: makeUrl(methodNotKey),\n            headers\n          });\n          shouldErrorWithData(result, error);\n          const {data} = error;\n          shouldBeDidResolverResponse(data);\n          shouldHaveDidResolutionError(data, 'methodNotSupported');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:ef95f506-f256-42f7-8390-f52c372dcee6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `methodNotSupported` error if method is not `key`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2924,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa266697d852943-ORD', connection: 'keep-alive', 'content-length': '42', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa266697d852943-ORD', connection: 'keep-alive', 'content-length': '42', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:90:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The version MUST be convertible to a positive integer value.",
          "cells": [
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:199d9c75-f7e3-433b-9c84-fd69a16910d4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:02dddb0c-af8e-4d31-a6bc-e3e095ee7f9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:b6e2ffef-ba6e-499d-8a0e-3028d705f804",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2083,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The version MUST be convertible to a positive integer value.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {version} = splitDid({did});\n          should.exist(version, `Expected ${did} to have a version.`);\n          shouldHaveValidVersion(version);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:5d2d15b2-9b42-4240-97ce-7f9cdb7106cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The version MUST be convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:54eea211-ab52-4fbb-9bd8-c85b97c9b561",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:115:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:76a095b3-0178-4c6b-aef0-6c9ec456d684",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:1d078ebb-3b88-47fb-9ac2-04227da26957",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if version is not convertible to a positive integer value.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidVersionDid = `${didParts.scheme}:${didParts.method}:` +\n          `-4:${didParts.multibase}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidVersionDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:ac573aa8-ce75-4006-bf5d-ce181e8e5923",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if version is not convertible to a positive integer value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa26669ddce2943-ORD', connection: 'keep-alive', 'content-length': '34', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa26669ddce2943-ORD', connection: 'keep-alive', 'content-length': '34', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:112:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "The multibaseValue MUST be a string and begin with the letter `z`",
          "cells": [
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:6abbd877-402e-4a15-9f84-4c058688f603",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 992,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:ff43bed3-0641-49f4-b4f2-b8ab1bb68a8a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1519,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:6b73cd68-6176-40ad-b6fe-ed93a14070bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2151,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The multibaseValue MUST be a string and begin with the letter `z`",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const {multibase} = splitDid({did});\n          should.exist(multibase, 'Expected multibase to exist');\n          multibase.should.be.a('string', 'Expected multibase to be a string');\n          multibase.startsWith('z').should.equal(\n            true,\n            'Expected multibase to start with z'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:24f5005f-9db6-4e44-a737-1140a7987571",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The multibaseValue MUST be a string and begin with the letter `z`"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
          "cells": [
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:2aedc862-3bf7-4c5b-9a32-8283fa4ad734",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidDid'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidDid",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidDid'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:141:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:2e7a9838-04c5-4dec-9d65-a7f1d9565e56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1519,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:8e40275e-d77f-4778-b43c-17dd47009ba1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const didParts = splitDid({did});\n        const invalidMultibaseDid = `${didParts.scheme}:${didParts.method}:` +\n          `${didParts.multibase.replace(/^z/, '')}`;\n        const {result, error} = await didResolver.get({\n          url: makeUrl(invalidMultibaseDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        const {data} = error;\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:e5714b11-8d9d-4ee7-94d6-81acc2abc95b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST raise `invalidDid` if the multibaseValue does not begin with the letter `z`."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666a2e232943-ORD', connection: 'keep-alive', 'content-length': '34', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666a2e232943-ORD', connection: 'keep-alive', 'content-length': '34', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:138:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
          "cells": [
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:5c390cb0-890d-426a-93eb-3ced4adf94fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:5ea6294a-c557-474d-bbd2-f0204fc91b44",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:1bad4943-370c-4303-9e72-6f84031009b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a didDocument: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a didDocument: expected null to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:161:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        // @ is not a valid character for a did identifier or version\n        const invalidDid = 'did:key:@';\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDid),\n          headers\n        });\n        should.exist(error, `Expected resolution of ${invalidDid} to error`);\n        should.not.exist(result, 'Expected no response.');\n        should.exist(\n          data,\n          `Expected resolution of ${invalidDid} to return a response`\n        );\n        shouldBeDidResolverResponse(data);\n        // FIXME this doesn't seem right we should not expect a didDocument\n        // for an invalid did\n        should.exist(data.didDocument, 'Expected a didDocument');\n        shouldHaveDidResolutionError(data, 'invalidDid');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:371ee34a-0295-4c58-877a-bc19345188cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If \"didDocument.id\" is not a valid DID, an `invalidDid` error MUST be raised"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected resolution of did:key:@ to return a response: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected resolution of did:key:@ to return a response: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:154:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:68ac4eb5-4ca3-499a-8790-bcf464b18358",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'methodNotSupported' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "methodNotSupported",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'methodNotSupported' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:e8a4d962-a064-4729-94bc-df08b9389d67",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:b388c73b-3eb5-436e-b61a-350754d66939",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'invalidPublicKeyLength'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "invalidPublicKeyLength",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'invalidPublicKeyLength'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:174:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidKeyLengthDid),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidResolutionError(data, 'invalidPublicKeyLength');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:06b90cc2-b086-456b-a4d3-31f47e483e9f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the byte length of rawPublicKeyBytes does not match the expected public key length for the associated multicodecValue, an `invalidPublicKeyLength` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3148,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666aeebd2943-ORD', connection: 'keep-alive', 'content-encoding': 'gzip', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666aeebd2943-ORD', connection: 'keep-alive', 'content-encoding': 'gzip', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:172:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:ba5ca3ca-b71e-47d7-a2f9-35db83fa5cce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(4) } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "timestamp": "2024-07-28T05:16:55.370+00:00",
                  "status": 400,
                  "error": "Bad Request",
                  "path": "/1.0/identifiers/did%3Akey%3Az6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b%2F%5Ebar%5E%2F%3Fquery%3D%60%23z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                },
                "stack": "AssertionError: expected { …(4) } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:199:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:1202a3be-4879-4b32-b2b2-f22e03d2d040",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1648,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:4d7b92a4-66e9-44f6-8126-0cf3b821ce95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { detail: 'Not Found' } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "detail": "Not Found"
                },
                "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:199:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const invalidDidUrl = `${did}/^bar^/?query=\\`#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(invalidDidUrl),\n          headers\n        });\n        shouldErrorWithData(result, error);\n        shouldBeDidResolverResponse(data);\n        shouldHaveDidDereferencingError(data, 'invalidDidUrl');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:c1fb709c-3533-42e9-b13f-4f127677d356",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.id is not a valid DID URL, an `invalidDidUrl` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an error with data: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an error with data: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:34:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:198:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:0f3c4486-a8c9-43af-8181-ac24eed4c1e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1118,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', date: 'Sun, 28 Jul 2024 05:16:55 GMT', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\";charset=utf-8', date: 'Sun, 28 Jul 2024 05:16:55 GMT', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:60fd0984-c5e2-4caf-8087-0841c037a3fd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:8d2e201a-1252-486f-9954-cbcbd34e558c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected 'invalidDid' to equal 'unsupportedPublicKeyType'",
                "showDiff": true,
                "actual": "invalidDid",
                "expected": "unsupportedPublicKeyType",
                "operator": "strictEqual",
                "stack": "AssertionError: expected 'invalidDid' to equal 'unsupportedPublicKeyType'\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:85:31)\n    at shouldHaveDidResolutionError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:38:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:213:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(did),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'unknown'\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidResolutionError(data, 'unsupportedPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:728898dd-d0f4-4a20-91fb-c31491016d93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If publicKeyFormat is not known to the implementation, an `unsupportedPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3265,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666b9f6c2943-ORD', connection: 'keep-alive', 'content-length': '37', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666b9f6c2943-ORD', connection: 'keep-alive', 'content-length': '37', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:212:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:f12d3d6c-0b98-473d-a0d7-dba4b19cc72a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1155,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:8203f28d-218f-4d9b-80ad-4e8640651787",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1729,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:42756b75-62ff-43df-b8ec-cd5dd7f08605",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2492,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:230:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(assertionVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:0e8e14a0-fd70-4e73-9918-77f689ba50e2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Signature Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3319,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666bffac2943-ORD', connection: 'keep-alive', 'content-encoding': 'gzip', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666bffac2943-ORD', connection: 'keep-alive', 'content-encoding': 'gzip', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare', 'transfer-encoding': 'chunked' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:229:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:94dc6aec-291b-41f0-a8ea-f75cd42ee173",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1181,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:0e66d22f-ede0-4f7d-83fa-588803d59a26",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1772,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:b4696b62-6947-42a4-b399-a419cbaa40f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2560,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property didDereferencingMetadata to exist: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property didDereferencingMetadata to exist: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at _shouldHaveMetadataError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:81:10)\n    at shouldHaveDidDereferencingError (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:42:10)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:247:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(keyAgreementVmId),\n          headers,\n          searchParams: {\n            publicKeyFormat: 'Ed25519VerificationKey2018',\n            enableExperimentalPublicKeyTypes: false\n          }\n        });\n        shouldErrorWithData(result, error);\n        shouldHaveDidDereferencingError(data, 'invalidPublicKeyType');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:1433a376-f387-4820-a6c5-91ac40a16ea9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "For Encryption Verification Methods, if options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an `invalidPublicKeyType` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666c4fe92943-ORD', connection: 'keep-alive', 'content-length': '32', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no response: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '8aa2666c4fe92943-ORD', connection: 'keep-alive', 'content-length': '32', 'content-type': 'application/ld+json;profile=\"https://w3id.org/did-resolution\"', date: 'Sun, 28 Jul 2024 05:16:57 GMT', server: 'cloudflare' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldErrorWithData (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:32:14)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:246:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mivbCK2W2RGOzhT5Ji0Nb",
              "ctx": null,
              "_testId": "urn:uuid:02e3ad08-938e-4012-8c2d-c7f3ccbaa404",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "lncXLIxaXjZABUKiaKVpF",
              "ctx": null,
              "_testId": "urn:uuid:d82577fc-8c04-488e-9f79-ff5acd26e812",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1820,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "BmDE6wKw4XWBzzFoq3PZz",
              "ctx": null,
              "_testId": "urn:uuid:02083ce4-e635-4ab3-9dea-eb565d1eca44",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "IDLab",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2627,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:258:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const {multibase} = splitDid({did});\n        const didUrl = `${did}#${multibase}`;\n        const {result, error, data} = await didResolver.get({\n          url: makeUrl(didUrl),\n          headers\n        });\n        should.exist(result, 'Expected a result');\n        should.not.exist(error, 'Did not expect an error');\n        shouldBeDidResolverResponse(data);\n        const {didDocument} = data;\n        didDocument.should.have.property('controller');\n        const {controller} = didDocument;\n        const didParts = splitDid({did: controller});\n        let didError;\n        try {\n          shouldBeValidDid(didParts);\n        } catch(e) {\n          didError = e;\n        }\n        if(didError) {\n          shouldHaveDidDereferencingError(data, 'invalidDid');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js",
              "parent": "mLdMAsgkqC5qxGUwoHxDn",
              "ctx": null,
              "_testId": "urn:uuid:d6dc7a73-9029-437d-84b7-57b4af1f6440",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If verificationMethod.controller is not a valid DID, an `invalidDid` error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3431,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { Success: { …(3) } } to have property 'didDocument'",
                "showDiff": false,
                "actual": {
                  "Success": {
                    "content": "{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"type\":\"Multikey\",\"controller\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"publicKeyMultibase\":\"z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}",
                    "metadata": {
                      "contentType": "application/did+ld+json"
                    },
                    "document_metadata": {
                      "deactivated": null
                    }
                  }
                },
                "stack": "AssertionError: expected { Success: { …(3) } } to have property 'didDocument'\n    at shouldBeDidResolverResponse (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/assertions.js:22:20)\n    at Context.<anonymous> (file:///home/runner/work/did-key-test-suite/did-key-test-suite/tests/10-create.js:260:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "did-key-test-suite",
    "subtitle": "Interoperability Report for did:key Method",
    "github": "https://github.com/w3c-ccg/did-key-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/did-key-test-suite/",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ]
  },
  "title": "did:key Method Interoperability Report 1.0",
  "stats": [
    "Tests passed 32/60 53%",
    "Tests failed 28/60 47%",
    "Failures 28",
    "Tests skipped 4",
    "Total tests 64"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}